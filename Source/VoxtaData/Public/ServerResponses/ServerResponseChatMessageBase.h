// Copyright(c) 2024 grrimgrriefer & DZnnah, see LICENSE for details.

#pragma once

#include "CoreMinimal.h"
#include "ServerResponseBase.h"

/**
 * Abstract read-only data struct containing the shared relevant data for all  the 'reply...' responses
 * from the VoxtaServer.
 */
struct ServerResponseChatMessageBase : ServerResponseBase
{
#pragma region helper classes
public:
	/** Contains the possible states that of the message that is currently being generated by Voxta. */
	enum class ChatMessageType
	{
		MessageStart,
		MessageChunk,
		MessageEnd,
		MessageCancelled
	};
#pragma endregion

#pragma region public API
public:
	explicit ServerResponseChatMessageBase(
		ChatMessageType messageType,
		FStringView messageId,
		FStringView sessionId) : ServerResponseBase(ServerResponseType::ChatMessage),
		MESSAGE_TYPE(messageType),
		MESSAGE_ID(messageId),
		SESSION_ID(sessionId)
	{
	}
#pragma endregion

#pragma region data
public:
	const ChatMessageType MESSAGE_TYPE;
	const FString MESSAGE_ID;
	const FString SESSION_ID;
#pragma endregion
};